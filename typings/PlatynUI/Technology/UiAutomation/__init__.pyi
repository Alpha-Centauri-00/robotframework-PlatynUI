import typing, abc
from PlatynUI.Technology.UiAutomation.Client import IUIAutomationElement

class Point:
    def __init__(self, x: float, y: float) -> None: ...
    @property
    def X(self) -> float: ...
    @X.setter
    def X(self, value: float) -> float: ...
    @property
    def Y(self) -> float: ...
    @Y.setter
    def Y(self, value: float) -> float: ...
    def ToString(self) -> str: ...

class Size:
    def __init__(self, width: float, height: float) -> None: ...
    @property
    def Width(self) -> float: ...
    @Width.setter
    def Width(self, value: float) -> float: ...
    @property
    def Height(self) -> float: ...
    @Height.setter
    def Height(self, value: float) -> float: ...
    def ToString(self) -> str: ...

class Rect:
    def __init__(self, x: float, y: float, width: float, height: float) -> None: ...
    @property
    def Height(self) -> float: ...
    @Height.setter
    def Height(self, value: float) -> float: ...
    @property
    def Width(self) -> float: ...
    @Width.setter
    def Width(self, value: float) -> float: ...
    @property
    def X(self) -> float: ...
    @X.setter
    def X(self, value: float) -> float: ...
    @property
    def Y(self) -> float: ...
    @Y.setter
    def Y(self, value: float) -> float: ...
    def ToString(self) -> str: ...

class Adapter(abc.ABC):
    @staticmethod
    def GetRole(element: IUIAutomationElement) -> str: ...
    @staticmethod
    def GetRuntimeId(element: IUIAutomationElement) -> str: ...
    @staticmethod
    def IsReadOnly(element: IUIAutomationElement) -> bool: ...
    @staticmethod
    def GetClickablePoint(element: IUIAutomationElement) -> Point: ...
    @staticmethod
    def GetTopLevelParent(element: IUIAutomationElement) -> typing.Optional[IUIAutomationElement]: ...
    @staticmethod
    def GetSupportedPropertyNames(element: IUIAutomationElement) -> typing.List[str]: ...
    @staticmethod
    def GetPropertyValue(element: IUIAutomationElement, name: str) -> typing.Any: ...
    @staticmethod
    def TryEnsureTopLevelParentIsActive(element: IUIAutomationElement) -> bool: ...

class Finder(abc.ABC):
    @staticmethod
    def FindSingleElement(
        parent: typing.Optional[IUIAutomationElement], xpath: str, findVirtual: bool = ...
    ) -> typing.Optional[IUIAutomationElement]: ...

class MouseButton(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Left: MouseButton  # 0
    Right: MouseButton  # 1
    Middle: MouseButton  # 2

class MouseDevice(abc.ABC):
    @staticmethod
    def GetDoubleClickTime() -> float: ...
    @staticmethod
    def GetDoubleClickSize() -> Size: ...
    @staticmethod
    def GetPosition() -> Point: ...
    @staticmethod
    def Press(button: typing.Union[int, MouseButton]) -> None: ...
    @staticmethod
    def Release(button: typing.Union[int, MouseButton]) -> None: ...
    @staticmethod
    def Move(x: float, y: float) -> None: ...
